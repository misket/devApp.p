load(url("http://bit.ly/dasi_gss_data"))
names(gss)
summary(gss$attend)
table(gss$attend)
table(gss$relig)
haed(gss$educ)
head(gss$educ)
summary(gss$educ)
hist(gss$educ)
barplot(table(gss$relig))
barplot(table(gss$relig), las = 2)
barplot(table(gss$attend), las = 2)
levels(gss$attend)
levels(gss$relig)
boxplot(gss$educ)
head(gss$attend,gss$educ)
head(gss[8,][32,])
head(gss[32,])
head(gss[,8][,32])
head(gss[,8])
head(gss$attend)
gss1 = data.frame(gss$attend)
gss1 = data.frame(gss$attend, gss$educ)
head(gss1)
head(gss1, 50)
quit()
names(tidy)
quit
levels(tidy[,2])
levels(tidy[,2])
quit()
install.packages("caret")
library(caret)
library(kernlab)
install.package(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type, p = .75, list = FALSE)
head(spam)
head(inTrain)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(inTrain)
dim(spam)
dim(testing)
1150+3451
set.seed(32343; modelFit <- train(type ~., data = training, methog = 'glm')
set.seed(32343); modelFit <- train(type ~., data = training, methog = 'glm')
set.seed(32343); modelFit <- train(type ~., data = training, method = 'glm')
install.packages("e1071")
set.seed(32343); modelFit <- train(type ~., data = training, method = 'glm')
modelFit
modelFit$finalModel
predict(modelFit, newdata=testing)
predictions <- predict(modelFit, newdata=testing)
confusionMatrix(predictions, testing$type)
set.seed(32323)
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = TRUE)
sapply(folds, length)
folds[[1]][1:10]
folds[[2]][1:10]
folds[[5]][1:10]
folds[[7]][1:10]
set.seed(32323)
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = FALSE)
set.seed(32323)
sapply(folds, length)
folds[[7]][1:10]
set.seed(32323)
tme <- 1:1000
slices <- createTimeSlices(tme, initialWindow = 20, horizon = 10)
names(folds)
names(slices)
head(folds$train)
head(slices$train)
names(slices$train)
slices$train[[1]]
slices$test[[1]]
training
inTrain
modelFit
install.packages("ISLR")
data(Wage)
library("ISLR")
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = .7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(taining)
dim(training)
dim(testing)
featurePlot(x = training[,c("age", "education", "jobclass")], y = training$wage, plot = "pairs")
qplot(age, wage, training)
qplot(age, wage, data = training)
qplot(age, wage, data = training, colour = jobclass)
qplot(age, wage, data = training, colour = education)
qq <- qplot(age, wage, data = training, colour = education)
qq+ geom_smooth(method = "lm", formula = y~x)
install.packages("Hmisc")
library(Hmisc)
cutWage <- cut1(training$wage, g = 3)
cutWage <- cut2(training$wage, g = 3)
class(cutWage)
head(cutWage)
t1 <- table(cutWage, training$jobclass)
prop.table(t1, 3)
prop.table(t1, 2)
prop.table(t1, 1)
prop.table(t1)
inTrain <- createDataPartition(y = spam$type, p = .75, list = FALSE)
testing <- spam[-inTrain,]
training <- spam[inTrain,]
preObj <- preProcess(training[,-58], method = c("center", "scale"))
mean(preObj$capitalAve)
head(preObj)
preObj$mean$capitalAve
preObj[[5]]$capitalAve
names(preObj)
preobj[6]
preObj[6]
preObj[6]$capitalAve
names(preObj[6])
preObj[[6]]
names(preObj[[6]])
preObj[[6]]$capitalAve
preObj[[6]][55]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
plot(CompressiveStrength, training)
plot(CompressiveStrength, data = training)
plot(training$CompressiveStrength,)
qplot(training$CompressiveStrength,)
qplot(training$CompressiveStrength, geom = "point")
qplot(training$CompressiveStrength, geom = "pt")
dev.off()
plot(training$CompressiveStrength,)
names(training)
qplot(training$Superplasticizer)
qplot(log(training$Superplasticizer)
)
qplot(log(training$Superplasticizer+1))
qplot(log(training$Superplasticizer))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?grep
training[grep("IL", names(training)),]
training[grep(,"IL", names(training))]
training[,grep("IL", names(training))]
head(training[,grep("IL", names(training))])
head(training[,grep("^IL", names(training))])
trn <- training[,grep("^IL", names(training))]
tst <- testing[,grep("^IL", names(training))]
preProc <- preProcess(trn, method = "pca")
trnPC <- predict(preProc, trn)
M <- abs(cor(trn))
dizg(M) <- 0
diag(M) <- 0
which(M> .9 arr.ind = TRUE)
which(M> .9, arr.ind = TRUE)
which(M> .8, arr.ind = TRUE)
which(M> .5, arr.ind = TRUE)
head(adData)
trn <- cbind(training[,grep("^IL", names(training))], training$diagnosis)
names(trn)
trn <- cbind(training[,grep("^IL", names(training))], diag = training$diagnosis)
names(trn)
trn <- cbind(training[,grep("^IL", names(training))], diag = test$diagnosis)
trn <- cbind(training[,grep("^IL", names(training))], diag = testing$diagnosis)
tst <- cbind(testing[,grep("^IL", names(testing))], diag = testing$diagnosis)
trn <- cbind(training[,grep("^IL", names(training))], diag = training$diagnosis)
mFPC <- train(trn$diagnosis~., method ="glm", preProcess = "pca", data = trn)
mFPC <- train(trn$diag~., method ="glm", preProcess = "pca", data = trn)
mF <- train(trn$diag~., method ="glm", data = trn)
confusionMatrix(tst$diag, predict(mFPC, tst))
confusionMatrix(tst$diag, predict(mF, tst))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(concrete)
names(mixtures)
names(training)
qplot(index, CompressiveStrength, data = training)
qplot(CompressiveStrength, data = training, geom = "point")
uzn <- seq_along(length(training$CompressiveStrength))
uzn
length(training$CompressiveStrength))
length(training$CompressiveStrength)
seq_along(length(training$CompressiveStrength))
seq_along(training$CompressiveStrength.Length)
length(training$CompressiveStrength)
uzn <- 1:774
qplot(uzn, CompressiveStrength, data = training)
index <- 1:774
qplot(index, CompressiveStrength, data = training)
qplot(index, CompressiveStrength, data = training, colour = Age)
qplot(index, CompressiveStrength, data = training, colour = Cement)
qplot(index, CompressiveStrength, data = training, colour = BlastFurnaceSlag)
qplot(index, CompressiveStrength, data = training, colour = FlyAsh)
qplot(index, CompressiveStrength, data = training, colour = Water)
qplot(FlyAsh, CompressiveStrength, data = training, colour = Water)
qplot(Age, CompressiveStrength, data = training, colour = Water)
qplot(index, CompressiveStrength, data = training, colour = c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggreagate", "Age"))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
sd(lm(y~x)$residuals)
data(mtcars)
names(cars)
names(mtcars)
q3 <- lm(mpg ~ wt, data = mtcars)
summary(q3)
qt(.95, 30)
qt(.025, 30)
tt <- qt(.025, 30)
q3$coef
q3$coef[2] - tt*.5591
names(q3)
q3$coef[2]
q3$coef[2] -5
q3$coef[2] + tt*.5591
?mtcars
37.2851 - 5.3445 * 3
6.486*2
6.486/2
summary(q3)
q9 <- lm(mpg ~ wt - 1, data = mtcars)
summary(q9)
.5591/.7468
.7468 / (1.876 + .5591)
(1.876 + .5591) / .7468
quit()
setwd("D:/Dropbox/coursera odevler/stasspec/devapp/devApp_slidify")
setwd("D:/Dropbox/coursera odevler/stasspec/devapp/devApp_slidify")
library(slidify)
author("devAppProject")
library("slidifyLibraries", lib.loc="C:/Users/misket/Documents/R/win-library/3.1")
library(slidifyLibraries)
colour = as.factor(gear))
qplot(wt, mpg, data = mtcars, colour = as.factor(gear))
library(ggplot2)
qplot(wt, mpg, data = mtcars, colour = as.factor(gear))
qplot(wt, mpg, data = mtcars, colour = as.factor(gear), method = "lm")
qplot(wt, mpg, data = mtcars, colour = as.factor(gear), method = "lm") + stat_smooth
qplot(wt, mpg, data = mtcars, colour = as.factor(gear), method = "lm") + stat_smooth()
qplot(wt, mpg, data = mtcars, geom = "smooth", method = "lm") +
qplot(wt, mpg, data = mtcars, geom = "smooth", method = "lm")
qplot(wt, mpg, data = mtcars, geom = "smooth", method = "lm") + geom_point(colour = as.factor(gear))
qplot(wt, mpg, data = mtcars, geom = "smooth", method = "lm") + geom_point(colour = as.factor(gear), data = mtcars)
qplot(wt, mpg, data = mtcars, geom = "smooth", method = "lm") + geom_point(colour = as.factor(gear)
qplot(wt, mpg, data = mtcars, geom = c("point", smooth"), method = "lm")
qplot(wt, mpg, data = mtcars, geom = c("point", "smooth"), method = "lm")
ggplot(mtcars, aes(wt, mpg)) + geom_point(colour = gear)
ggplot(mtcars, aes(wt, mpg, gear)) + geom_point(colour = gear)
ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = gear))
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = as.factor(gear))
)
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = as.factor(gear))) + stat_smooth()
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = as.factor(gear))) + stat_smooth(method = "lm")
?publish
publish(user = "misket", repo = "devApp.pr")
publish(user = "misket", repo = "devApp.pr")
source('D:/Dropbox/coursera odevler/stasspec/devapp/devApp_slidify/devApp.pr/runapp.R', echo=TRUE)
